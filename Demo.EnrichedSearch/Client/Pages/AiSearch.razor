@page "/AiSearch"
@using Demo.EnrichedSearch.Shared.Models
@using Demo.EnrichedSearch.Shared.Models.AiSearch
@using Azure.Search.Documents.Indexes.Models
@using Microsoft.AspNetCore.WebUtilities
@inject NavigationManager NavigationManager
@inject HttpClient Http

<h3>AiSearch</h3>

@if (afterFirstLoad)
{

    @if (afterFirstLoad && searchIndexStatistics != null)
    {
        <div class="container">
            <ul class="list-group">
                <li class="list-group-item">
                    <h4>Index</h4>
                    <strong>Index Name: </strong> @searchIndexStatistics.IndexName <br />
                    <strong>Documents Count: </strong> @searchIndexStatistics.DocumentCount <br />
                    <strong>Documents Size: </strong> @searchIndexStatistics.StorageSize <br />
                    <hr />
                    <h4>Indexer</h4>
                    <strong>Indexer Name: </strong> @searchIndexStatistics.IndexName <br />
                    <strong>Index Status: </strong> @searchIndexStatistics.IndexerStatus <br />
                    <hr />
                    <EditForm Model=@searchBody OnSubmit="SearchIndex">
                        <div class="form-inline">
                            <InputText @bind-Value=searchBody.Search class="form-control" id="Name" />
                            <input type="submit" class="btn btn-primary" value="Search" />
                        </div>
                    </EditForm>
                </li>
            </ul>
        </div>
        <div class="container">
            @if (searchResponse?.ResultList != null)
            {
            <ul class="list-group">
                <li class="list-group-item">
                    <strong>@searchResponse.TotalCount Search Results:</strong>
                    @foreach (var result in searchResponse.ResultList)
                    {
                        <hr />
                        <strong>@result.FileName</strong> 
                        <p>
                            <a href="@result.FileLocation" target="_blank" class="btn btn-link">Download</a>
                        </p>
                    }
                    <nav aria-label="Page navigation example">
                        <ul class="pagination">
                            @if (searchResponse.previousPage.HasValue)
                            {
                                <li class="page-item"><button class="page-link" @onclick="() => PageSearchIndex(searchResponse.previousPage.Value)">Previous</button></li>
                            }
                            <li class="page-item"><a class="page-link"><strong>@searchResponse.currentPage</strong></a></li>
                            @if (searchResponse.nextPage.HasValue)
                            {
                                <li class="page-item"><button class="page-link" @onclick="() => PageSearchIndex(searchResponse.nextPage.Value)">Next</button></li>
                            }
                        </ul>
                    </nav>
                </li>
            </ul>
            }
        </div>
    }
    else
    {
        <button type="button" class="btn btn-primary" @onclick="CreateIndex">Create Index</button>
    }
}
else
{
    <p>Loading...</p>
}

@code {
    private IndexStats searchIndexStatistics;
    private bool afterFirstLoad = false;
    private AiSearchResponse searchResponse;
    private SearchBody searchBody = new SearchBody();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            searchIndexStatistics = await Http.GetFromJsonAsync<IndexStats>("AiSearches");
        }
        catch (Exception)
        {
            searchIndexStatistics = null;
        }
        afterFirstLoad = true;
    }

    private async Task CreateIndex()
    {
        var response = await Http.PostAsync("AiSearches/Create", null);
        await OnInitializedAsync();
    }

    private async Task SearchIndex()
    {
        var response = await Http.PostAsJsonAsync<SearchBody>("AiSearches/Search", searchBody);

        if (response.IsSuccessStatusCode)
        {
            searchResponse = await response.Content.ReadFromJsonAsync<AiSearchResponse>();
        }
    }
    private async Task PageSearchIndex(int page)
    {
        searchBody.Page = page;
        await SearchIndex();
    }
}
