@page "/EnrichedSearch"
@using Demo.EnrichedSearch.Shared.Models
@using Azure.Search.Documents.Indexes.Models
@using Microsoft.AspNetCore.WebUtilities
@inject NavigationManager NavigationManager
@inject HttpClient Http

<h3>Enriched Search</h3>

@if (afterFirstLoad)
{

    @if (afterFirstLoad && searchIndexStatistics != null)
    {
        <div class="container">
            <ul class="list-group">
                <li class="list-group-item">
                    <strong>Index Name: </strong> @searchIndexStatistics.IndexName <br />
                    <strong>Documents Count: </strong> @searchIndexStatistics.DocumentCount <br />
                    <strong>Documents Size: </strong> @searchIndexStatistics.StorageSize <br />
                </li>
                <li class="list-group-item">
                    <button type="button" class="btn btn-danger" @onclick="DeleteIndex">Delete Index</button>
                    
                </li>
                <li class="list-group-item">
                    <div class="form-inline">                        
                        <BlazoredTypeahead SearchMethod="AutoSuggest" @bind-Value=searchBody.Search>
                            <SelectedTemplate>
                                @context
                            </SelectedTemplate>
                            <ResultTemplate>
                                @context
                            </ResultTemplate>
                            <NotFoundTemplate>
                                Sorry, there weren't any search results.
                            </NotFoundTemplate>
                        </BlazoredTypeahead>
                        <button type="submit" class="btn btn-primary" @onclick="SearchIndexAndClearFacets">
                            <span class="oi oi-magnifying-glass" aria-hidden="true"></span> Search
                        </button>                        
                    </div>   
                </li>
                @if (searchResponse != null && searchResponse.Facets != null && searchResponse.Facets.Any())
                {
                    <li class="list-group-item">
                        <h4>Facets</h4>
                        <div class="form-group">
                            <label class="form-check-label" for="facet-category">Category</label>
                            <select class="form-control selectpicker" id="facet-category" @onchange=FacetCategorySelect>
                                <option value=""> </option>
                                @foreach (var item in searchResponse.Facets["Category"])
                                {
                                    if (item == searchBody.SelectedCategory)
                                    {
                                        <option selected value="@item">@item</option>
                                    }
                                    else
                                    {
                                        <option value="@item">@item</option>
                                    }
                                }
                            </select>
                        </div>
                        <div class="form-group">
                            <label class="form-check-label" for="facet-tags">Tags</label>
                            <select class="form-control selectpicker" id="facet-tags" @onchange=FacetTagSelect>
                                <option value=""> </option>
                                @foreach (var item in searchResponse.Facets["Tags"])
                                {
                                    if (item == searchBody.SelectedTag)
                                    {
                                        <option selected value="@item">@item</option>
                                    }
                                    else
                                    {
                                        <option value="@item">@item</option>
                                    }
                                }
                            </select>
                        </div>
                    </li>
                }
            </ul>
        </div>
        <div class="container">
            @if (searchResponse?.ResultList != null)
            {
                <ul class="list-group">
                    <li class="list-group-item">
                        <strong>@searchResponse.TotalCount Search Results:</strong>
                    </li>
                    @foreach (var result in searchResponse.ResultList)
                    {
                        <li class="list-group-item">
                            <strong>@result.HotelName</strong>
                            <p>
                                @result.Description
                            </p>
                        </li>
                    }
                    <li class="list-group-item">
                        <nav aria-label="Page navigation example">
                            <ul class="pagination">
                                @if (searchResponse.previousPage.HasValue)
                                {
                                    <li class="page-item"><button class="page-link" @onclick="() => PageSearchIndex(searchResponse.previousPage.Value)">Previous</button></li>
                                }
                                <li class="page-item"><a class="page-link"><strong>@searchResponse.currentPage</strong></a></li>
                                @if (searchResponse.nextPage.HasValue)
                                {
                                    <li class="page-item"><button class="page-link" @onclick="() => PageSearchIndex(searchResponse.nextPage.Value)">Next</button></li>
                                }
                            </ul>
                        </nav>
                    </li>
                </ul>
            }
        </div>
    }
    else
    {
        <button type="button" class="btn btn-primary" @onclick="CreateIndex">Create Index</button>
    }
}
else
{
    <p>Loading...</p>
}

@code {
    private IndexStats searchIndexStatistics;
    private bool afterFirstLoad = false;
    private SearchResponse searchResponse;
    private SearchBody searchBody = new SearchBody();
    private string selectedCategory;
    private string selectedTag;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            searchIndexStatistics = await Http.GetFromJsonAsync<IndexStats>("EnrichedSearches");
        }
        catch (Exception)
        {
            searchIndexStatistics = null;
        }
        afterFirstLoad = true;
    }

    private async Task CreateIndex()
    {
        var response = await Http.PostAsync("EnrichedSearches/Create", null);
        await OnInitializedAsync();
    }

    private async Task DeleteIndex()
    {
        var response = await Http.DeleteAsync("EnrichedSearches");
        searchIndexStatistics = null;
    }

    private async Task SearchIndexAndClearFacets()
    {
        searchBody.SelectedCategory = null;
        searchBody.SelectedTag = null;
        await SearchIndex();
    }

    private async Task SearchIndex()
    {
        var response = await Http.PostAsJsonAsync<SearchBody>("EnrichedSearches/Search", searchBody);

        if (response.IsSuccessStatusCode)
        {
            searchResponse = await response.Content.ReadFromJsonAsync<SearchResponse>();
        }
    }
    private async Task PageSearchIndex(int page)
    {
        searchBody.Page = page;
        await SearchIndex();
    }
    private async Task<IEnumerable<string>> AutoSuggest(string term)
    {
        var suggestions = await Http.GetFromJsonAsync<IEnumerable<string>>($"EnrichedSearches/AutoSuggest?term={term}");
        return suggestions;
    }

    private async Task FacetCategorySelect(ChangeEventArgs e)
    {
        var value = e.Value.ToString();
        searchBody.SelectedCategory = (string.IsNullOrWhiteSpace(value)) ? null : value;
        await SearchIndex();
    }

    private async Task FacetTagSelect(ChangeEventArgs e)
    {
        var value = e.Value.ToString();
        searchBody.SelectedTag = (string.IsNullOrWhiteSpace(value)) ? null : value;
        await SearchIndex();
    }
}
